/* tslint:disable */
/* eslint-disable */
/**
 * TrainYourBrain
 * TYB reference for developers
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateQuizUsingPostRequest
 */
export interface CreateQuizUsingPostRequest {
    /**
     * L\'argomento principale del quiz
     * @type {string}
     * @memberof CreateQuizUsingPostRequest
     */
    'topic'?: string;
    /**
     * Una descrizione dell\'argomento
     * @type {string}
     * @memberof CreateQuizUsingPostRequest
     */
    'topicDescription'?: string;
    /**
     * 
     * @type {Array<QuestionType>}
     * @memberof CreateQuizUsingPostRequest
     */
    'questions'?: Array<QuestionType>;
    /**
     * Il file multimediale da caricare
     * @type {string}
     * @memberof CreateQuizUsingPostRequest
     */
    'imageFile'?: string;
}
/**
 * 
 * @export
 * @interface EsitoType
 */
export interface EsitoType {
    /**
     * 
     * @type {string}
     * @memberof EsitoType
     */
    'esito'?: string;
    /**
     * 
     * @type {string}
     * @memberof EsitoType
     */
    'descrizione': string;
}
/**
 * 
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     * 
     * @type {string}
     * @memberof Login200Response
     */
    'token'?: string;
    /**
     * 
     * @type {UserType}
     * @memberof Login200Response
     */
    'userData'?: UserType;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface QuestionType
 */
export interface QuestionType {
    /**
     * 
     * @type {string}
     * @memberof QuestionType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionType
     */
    'description': string;
    /**
     * 
     * @type {Array<QuestionTypeAnswersInner>}
     * @memberof QuestionType
     */
    'answers': Array<QuestionTypeAnswersInner>;
}
/**
 * 
 * @export
 * @interface QuestionTypeAnswersInner
 */
export interface QuestionTypeAnswersInner {
    /**
     * 
     * @type {string}
     * @memberof QuestionTypeAnswersInner
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionTypeAnswersInner
     */
    'isCorrect': boolean;
}
/**
 * 
 * @export
 * @interface QuizDto
 */
export interface QuizDto {
    /**
     * 
     * @type {Array<QuestionType>}
     * @memberof QuizDto
     */
    'questions': Array<QuestionType>;
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'topic': string;
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'topicDescription': string;
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'imageFile'?: string;
}
/**
 * 
 * @export
 * @interface QuizResponse
 */
export interface QuizResponse {
    /**
     * 
     * @type {EsitoType}
     * @memberof QuizResponse
     */
    'esito': EsitoType;
    /**
     * 
     * @type {Array<QuizDto>}
     * @memberof QuizResponse
     */
    'result': Array<QuizDto>;
}
/**
 * 
 * @export
 * @interface QuizResultsByUserIdResponse
 */
export interface QuizResultsByUserIdResponse {
    /**
     * 
     * @type {EsitoType}
     * @memberof QuizResultsByUserIdResponse
     */
    'esito'?: EsitoType;
    /**
     * 
     * @type {Array<UserQuizResultType>}
     * @memberof QuizResultsByUserIdResponse
     */
    'result'?: Array<UserQuizResultType>;
}
/**
 * 
 * @export
 * @interface ResultUserResponse
 */
export interface ResultUserResponse {
    /**
     * 
     * @type {EsitoType}
     * @memberof ResultUserResponse
     */
    'esito': EsitoType;
    /**
     * 
     * @type {UserType}
     * @memberof ResultUserResponse
     */
    'result': UserType;
}
/**
 * 
 * @export
 * @interface UserQuizResultType
 */
export interface UserQuizResultType {
    /**
     * 
     * @type {string}
     * @memberof UserQuizResultType
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserQuizResultType
     */
    'topic': string;
    /**
     * 
     * @type {number}
     * @memberof UserQuizResultType
     */
    'totalScore': number;
    /**
     * 
     * @type {string}
     * @memberof UserQuizResultType
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface UserType
 */
export interface UserType {
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'email'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST api/auth/login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST api/auth/login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary POST api/auth/login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<Login200Response> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary POST api/auth/login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuizApi - axios parameter creator
 * @export
 */
export const QuizApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Permette di controllare le risposte
         * @param {string} quizId 
         * @param {string} questionId 
         * @param {number} answerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAnswerUsingGet: async (quizId: string, questionId: string, answerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('checkAnswerUsingGet', 'quizId', quizId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('checkAnswerUsingGet', 'questionId', questionId)
            // verify required parameter 'answerId' is not null or undefined
            assertParamExists('checkAnswerUsingGet', 'answerId', answerId)
            const localVarPath = `/quiz/{quizId}/{questionId}/{answerId}`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)))
                .replace(`{${"questionId"}}`, encodeURIComponent(String(questionId)))
                .replace(`{${"answerId"}}`, encodeURIComponent(String(answerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Permette di inserire un quiz con delle domande
         * @param {CreateQuizUsingPostRequest} createQuizUsingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuizUsingPost: async (createQuizUsingPostRequest: CreateQuizUsingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createQuizUsingPostRequest' is not null or undefined
            assertParamExists('createQuizUsingPost', 'createQuizUsingPostRequest', createQuizUsingPostRequest)
            const localVarPath = `/quiz/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuizUsingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Recupera i risultati per un determinato userID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizResultsByUserId: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getQuizResultsByUserId', 'userId', userId)
            const localVarPath = `/quiz/results/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Permette di recuperare le domanda per uno specifico topic
         * @param {string} topic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizUsingGet: async (topic: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topic' is not null or undefined
            assertParamExists('getQuizUsingGet', 'topic', topic)
            const localVarPath = `/quiz/{topic}`
                .replace(`{${"topic"}}`, encodeURIComponent(String(topic)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Permette di controllare le risposte
         * @param {UserQuizResultType} [userQuizResultType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveQuizUsingPost: async (userQuizResultType?: UserQuizResultType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quiz/saveQuiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userQuizResultType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizApi - functional programming interface
 * @export
 */
export const QuizApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Permette di controllare le risposte
         * @param {string} quizId 
         * @param {string} questionId 
         * @param {number} answerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAnswerUsingGet(quizId: string, questionId: string, answerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAnswerUsingGet(quizId, questionId, answerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Permette di inserire un quiz con delle domande
         * @param {CreateQuizUsingPostRequest} createQuizUsingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuizUsingPost(createQuizUsingPostRequest: CreateQuizUsingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EsitoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuizUsingPost(createQuizUsingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Recupera i risultati per un determinato userID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuizResultsByUserId(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizResultsByUserIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuizResultsByUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Permette di recuperare le domanda per uno specifico topic
         * @param {string} topic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuizUsingGet(topic: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuizUsingGet(topic, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Permette di controllare le risposte
         * @param {UserQuizResultType} [userQuizResultType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveQuizUsingPost(userQuizResultType?: UserQuizResultType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EsitoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveQuizUsingPost(userQuizResultType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuizApi - factory interface
 * @export
 */
export const QuizApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizApiFp(configuration)
    return {
        /**
         * 
         * @summary Permette di controllare le risposte
         * @param {string} quizId 
         * @param {string} questionId 
         * @param {number} answerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAnswerUsingGet(quizId: string, questionId: string, answerId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.checkAnswerUsingGet(quizId, questionId, answerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Permette di inserire un quiz con delle domande
         * @param {CreateQuizUsingPostRequest} createQuizUsingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuizUsingPost(createQuizUsingPostRequest: CreateQuizUsingPostRequest, options?: any): AxiosPromise<EsitoType> {
            return localVarFp.createQuizUsingPost(createQuizUsingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Recupera i risultati per un determinato userID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizResultsByUserId(userId: string, options?: any): AxiosPromise<QuizResultsByUserIdResponse> {
            return localVarFp.getQuizResultsByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Permette di recuperare le domanda per uno specifico topic
         * @param {string} topic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuizUsingGet(topic: string, options?: any): AxiosPromise<QuizResponse> {
            return localVarFp.getQuizUsingGet(topic, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Permette di controllare le risposte
         * @param {UserQuizResultType} [userQuizResultType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveQuizUsingPost(userQuizResultType?: UserQuizResultType, options?: any): AxiosPromise<EsitoType> {
            return localVarFp.saveQuizUsingPost(userQuizResultType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizApi - object-oriented interface
 * @export
 * @class QuizApi
 * @extends {BaseAPI}
 */
export class QuizApi extends BaseAPI {
    /**
     * 
     * @summary Permette di controllare le risposte
     * @param {string} quizId 
     * @param {string} questionId 
     * @param {number} answerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public checkAnswerUsingGet(quizId: string, questionId: string, answerId: number, options?: AxiosRequestConfig) {
        return QuizApiFp(this.configuration).checkAnswerUsingGet(quizId, questionId, answerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Permette di inserire un quiz con delle domande
     * @param {CreateQuizUsingPostRequest} createQuizUsingPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public createQuizUsingPost(createQuizUsingPostRequest: CreateQuizUsingPostRequest, options?: AxiosRequestConfig) {
        return QuizApiFp(this.configuration).createQuizUsingPost(createQuizUsingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Recupera i risultati per un determinato userID
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public getQuizResultsByUserId(userId: string, options?: AxiosRequestConfig) {
        return QuizApiFp(this.configuration).getQuizResultsByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Permette di recuperare le domanda per uno specifico topic
     * @param {string} topic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public getQuizUsingGet(topic: string, options?: AxiosRequestConfig) {
        return QuizApiFp(this.configuration).getQuizUsingGet(topic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Permette di controllare le risposte
     * @param {UserQuizResultType} [userQuizResultType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public saveQuizUsingPost(userQuizResultType?: UserQuizResultType, options?: AxiosRequestConfig) {
        return QuizApiFp(this.configuration).saveQuizUsingPost(userQuizResultType, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Permette di creare un nuovo utente
         * @param {UserType} [userType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (userType?: UserType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manage-user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/manage-user/user
         * @param {UserType} userType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUsername: async (userType: UserType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userType' is not null or undefined
            assertParamExists('getUserByUsername', 'userType', userType)
            const localVarPath = `/manage-user/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Permette di creare un nuovo utente
         * @param {UserType} [userType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(userType?: UserType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EsitoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsingPOST(userType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST api/manage-user/user
         * @param {UserType} userType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUsername(userType: UserType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUsername(userType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Permette di creare un nuovo utente
         * @param {UserType} [userType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(userType?: UserType, options?: any): AxiosPromise<EsitoType> {
            return localVarFp.createUserUsingPOST(userType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/manage-user/user
         * @param {UserType} userType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUsername(userType: UserType, options?: any): AxiosPromise<ResultUserResponse> {
            return localVarFp.getUserByUsername(userType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Permette di creare un nuovo utente
     * @param {UserType} [userType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserUsingPOST(userType?: UserType, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserUsingPOST(userType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/manage-user/user
     * @param {UserType} userType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByUsername(userType: UserType, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByUsername(userType, options).then((request) => request(this.axios, this.basePath));
    }
}



